{"version":3,"sources":["components/Header.js","components/Footer.js","lib/draw.js","components/Canvas.js","lib/json-float-parser.js","components/InfoSection.js","App.js","reportWebVitals.js","index.js"],"names":["Header","React","createElement","Footer","drawBody","p","body","position","radius","bodyType","vertices","noFill","stroke","strokeWeight","beginShape","vertex","x","y","endShape","CLOSE","drawAsteroid","fill","ellipse","drawSpaceship","Canvas","_ref","stompClient","canvasRef","useRef","bodiesRef","useEffect","sketch","setup","createCanvas","subscribe","message","updatedBodies","jsonString","jsonWithFloats","replace","JSON","parse","parseJsonWithFloats","length","Array","prototype","push","apply","current","draw","background","send","requestBodies","p5","ref","InfoSection","className","App","setStompClient","useState","socket","SockJS","client","Stomp","over","connect","disconnect","id","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.c75592ae.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = () => (\r\n  <header>\r\n    <div>\r\n      <h3>UBU</h3>\r\n      <p>Motor de físicas basado en Java y SpringBoot</p>\r\n    </div>\r\n  </header>\r\n);\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\nconst Footer = () => (\r\n  <footer>\r\n    <div>\r\n      <h3>Autores: Daniel Meruelo Monzón</h3>\r\n    </div>\r\n  </footer>\r\n);\r\n\r\nexport default Footer;\r\n","export function drawBody(p, body) {\r\n    const { position, radius, bodyType, vertices } = body;\r\n  \r\n    if (bodyType === \"ASTEROID\") {\r\n      drawAsteroid(p, position, vertices);\r\n    } else if (bodyType === \"SPACESHIP\") {\r\n      drawSpaceship(p, position);\r\n    }\r\n    else { \r\n      p.noFill();\r\n      p.stroke(0);\r\n      p.strokeWeight(2);\r\n      p.ellipse(position.x, position.y, radius * 2, radius * 2);\r\n    }\r\n  }\r\n  \r\n  function drawAsteroid(p, position, vertices) {\r\n    p.noFill();\r\n    p.stroke(0);\r\n    p.strokeWeight(2);\r\n    //console.log(\"MY_DEBUG: Drawing asteroid\", position, vertices);\r\n    p.beginShape();\r\n    for (const vertex of vertices) {\r\n      p.vertex(vertex.x + position.x, vertex.y + position.y);\r\n    }\r\n    p.endShape(p.CLOSE);\r\n  }\r\n\r\n  function drawSpaceship(p, position){\r\n    p.fill(255, 165, 0);\r\n    p.stroke(0);\r\n    p.strokeWeight(2);\r\n    p.ellipse(position.x, position.y, 10 * 2, 10 * 2);\r\n  }","import React, { useEffect, useRef } from 'react';\r\nimport p5 from 'p5';\r\nimport \"./Canvas.css\";\r\nimport { parseJsonWithFloats } from '../lib/json-float-parser.js';\r\nimport { drawBody } from '../lib/draw.js';\r\n\r\n\r\nconst Canvas = ({ stompClient }) => {\r\n    const canvasRef = useRef();\r\n    const bodiesRef = useRef([]);\r\n  \r\n    useEffect(() => {\r\n      if (stompClient) {\r\n        const sketch = (p) => {\r\n          p.setup = () => {\r\n            p.createCanvas(1240, 720);\r\n            stompClient.subscribe(\"/topic/bodies\", (message) => {\r\n                const updatedBodies = parseJsonWithFloats(message.body);\r\n                bodiesRef.length = 0; // Clear the existing bodies array\r\n                Array.prototype.push.apply(bodiesRef.current, updatedBodies);\r\n            });\r\n          };\r\n  \r\n          p.draw = () => {\r\n            p.background(255);\r\n            requestBodies(stompClient);\r\n\r\n            for (const body of bodiesRef.current) {\r\n                drawBody(p, body);\r\n              }\r\n          };\r\n        };\r\n  \r\n        new p5(sketch, canvasRef.current);\r\n      }\r\n    }, [stompClient]);\r\n  \r\n    return <div ref={canvasRef}></div>;\r\n  };\r\n\r\n  function requestBodies(stompClient) {\r\n    stompClient.send(\"/app/retrieve-bodies\", {}, \"\");\r\n}\r\n\r\nexport default Canvas;","export function parseJsonWithFloats(jsonString) {\r\n    const floatRegex = /\"(\\w+)\": \"([-+]?[0-9]*\\.?[0-9]+([eE][-+]?[0-9]+)?)/g;\r\n    const jsonWithFloats = jsonString.replace(floatRegex, '\"$1\": $2');\r\n    return JSON.parse(jsonWithFloats);\r\n  }","import React from \"react\";\r\nimport \"./InfoSection.css\";\r\n\r\nconst InfoSection = () => (\r\n\r\n    <div className=\"InfoSection\">\r\n        <h1>InfoSection</h1>\r\n    </div>\r\n\r\n\r\n);\r\n\r\nexport default InfoSection;","import React, { useState, useEffect } from 'react';\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Canvas from \"./components/Canvas\";\nimport InfoSection from \"./components/InfoSection\";\nimport SockJS from 'sockjs-client';\nimport { Stomp } from '@stomp/stompjs';\n\nfunction App() {\n\n  const [stompClient, setStompClient] = useState(null);\n\n  useEffect(() => {\n    const socket = new SockJS('http://localhost:3100/physics-engine-websocket');\n    const client = Stomp.over(socket);\n\n    client.connect({}, () => {\n      setStompClient(client);\n    });\n\n    return () => {\n      if (client) {\n        client.disconnect();\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <div id=\"content\">\n        <Canvas stompClient={stompClient} />\n        <InfoSection />\n      </div>\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}